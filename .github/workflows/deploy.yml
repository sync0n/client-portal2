name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history for all branches

      - name: Debug: List repository contents
        run: ls -al

      - name: Check Docker Daemon
        run: docker info || { echo "Docker daemon not running"; exit 1; }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build and Tag Docker Image
        run: |
          docker build --no-cache -t client-portal:$GITHUB_SHA .
          docker tag client-portal:$GITHUB_SHA ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA
          docker tag client-portal:$GITHUB_SHA ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

  deploy_staging:
    needs: build
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Staging via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.STAGING_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying latest build to staging" \
            --parameters "{\"commands\":[\"aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}\",\"docker pull ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA\",\"cd /home/ubuntu/client-portal\",\"docker-compose up -d\"]}" \
            --region ${{ secrets.AWS_REGION }}

  deploy_production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Production via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.PRODUCTION_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying latest build to production" \
            --parameters "{\"commands\":[\"aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}\",\"docker pull ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA\",\"cd /home/ubuntu/client-portal\",\"docker-compose up -d\"]}" \
            --region ${{ secrets.AWS_REGION }}
