name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

permissions:
  id-token: write  # Enables the OIDC token for authentication with AWS
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Confirm code checkout
        run: |
          echo "Current working directory: $(pwd)"
          ls -l

      - name: Install jq (if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker Image
        run: |
          echo "Starting Docker build..."
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA ${{ secrets.ECR_REPOSITORY_URI }}:latest
          echo "Docker build complete."

      - name: Verify Docker Images Exist with Correct Tags
        run: |
          echo "Available Docker images:"
          docker images
          echo "Verifying if image ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA exists locally..."
          docker image inspect ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA || { echo "Image with SHA tag not found!"; exit 1; }
          docker image inspect ${{ secrets.ECR_REPOSITORY_URI }}:latest || { echo "Image with 'latest' tag not found!"; exit 1; }

  push_to_ecr:
    needs: build
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Push SHA Tagged Image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA

      - name: Push Latest Tagged Image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

  deploy_staging:
    needs: push_to_ecr
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Staging
        run: |
          ssh -i ${{ secrets.STAGING_SSH_KEY }} ubuntu@${{ secrets.STAGING_HOST }} \
          "docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest && docker-compose up -d"

  deploy_production:
    needs: push_to_ecr
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Production
        run: |
          ssh -i ${{ secrets.PRODUCTION_SSH_KEY }} ubuntu@${{ secrets.PRODUCTION_HOST }} \
          "docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest && docker-compose up -d"
