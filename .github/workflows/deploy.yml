name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true  # Enables step debugging for detailed logs

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Confirm code checkout
        run: |
          echo "Current working directory: $(pwd)"
          ls -l

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials configuration..."
          aws sts get-caller-identity || echo "Failed to retrieve AWS credentials, check role ARN or permissions."

      - name: Debug AWS environment variables
        run: |
          echo "Environment variables:"
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          echo "AWS configuration files:"
          cat ~/.aws/config || echo "No AWS config file found"
          cat ~/.aws/credentials || echo "No AWS credentials file found"

      - name: Request and Print OIDC Token
        id: oidc-token
        run: |
          echo "Requesting OIDC token..."
          curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq

      - name: Build Docker Image
        run: |
          echo "Starting Docker build..."
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA . || echo "Docker build failed."
          echo "Docker build complete."

  push_to_ecr:
    needs: build
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true  # Enables step debugging for detailed logs

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Push to ECR
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$GITHUB_SHA ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

  deploy_staging:
    needs: push_to_ecr
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true  # Enables step debugging for detailed logs

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Staging
        run: |
          ssh -i ${{ secrets.STAGING_SSH_KEY }} ubuntu@${{ secrets.STAGING_HOST }} \
          "docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest && docker-compose up -d"

  deploy_production:
    needs: push_to_ecr
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true  # Enables step debugging for detailed logs

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Production
        run: |
          ssh -i ${{ secrets.PRODUCTION_SSH_KEY }} ubuntu@${{ secrets.PRODUCTION_HOST }} \
          "docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest && docker-compose up -d"
